<s_exp> ::= "(" <oper> ") " <s_exp> | "(" <func> ")" <s_exp> | E
<arg> ::= <var> | <liter> | "(" <oper> ")"
<var> ::= <name>
<name> ::= <let> | <name_extr>
<name_extr> ::= <let> <name_extr> | E
<let> ::= [a-z]
<num> ::= [0-9]
<liter> ::= <sign> <nums> | "\"" <str> "\"" | "'" <char> "'" | "PRAVDA" | "LOZH"
<char> ::= [a-z] | [0-9]
<sign> ::= E | "+" | "-"
<nums> ::= <num> <nums_extr>
<nums_extr> ::= <num> <nums_extr> | "." <d_num> | E
<d_num> ::= <num> <d_num_extr>
<d_num_extr> ::= <num> <d_num_extr> | E
<str> ::= <char> <str_extr>
<str_extr> ::= <char> <str_extr> | E
<oper> ::= <easy_oper> | <hard_oper> | E # moved car, cdr and cons to simple operator
<easy_oper> ::= <simple_oper> | <cond_oper>
<simple_oper> ::= <simple> ( " " <arg> )+
<cond_oper> ::= <cond> ( " " <arg> )+
<simple> ::= "+" | "-" | "*" | "/" | "max" | "min"
<cond> ::= "takzhe" | "libo" | "=" | "/=" | ">" | "<" | ">=" | "<="
<hard_oper> ::= <loop_for> | <loop> | <if> | <write> | <read> | <mod> | <not> | <incf> | <decf> | <return> | <fact> | <setf> | <car> | <cdr> | <cons> | <func_call>
<loop_for> ::= "idi_poka " <var> " ne_stanet " <arg> (<oper>)*
<loop> ::= "zhivi " (<oper>)* "(umri_kogda (" <cond_oper> ") (" <return> "))"
<if> ::= "esli " "(" <cond_oper> ")" "(" (<oper>)+ ")" "(" (<oper>)* ")"
<func> ::= "func " <name> " (" (<var>)* ") (" (<oper>)* ") (" <return> ")"
<write> ::= "napishi " <arg>
<read> ::= "sprosi " <var>
<mod> ::= "mod " <arg> " " <arg>
<not> ::= "ne " <arg>
<fact> ::= "! " <arg>
<incf> ::= "pribav " <arg> ( " " <arg>)?
<decf> ::= "ubav " <arg> ( " " <arg>)?
<return> ::= "verni " <arg>
<car> ::= "golova " <arg> # changed from s_exp
<cdr> ::= "telo " <arg> # changed from s_exp
<cons> ::= "partia " <arg> (" " <arg>)+
<setf> ::= "tovarisch " <var> " " <arg>
<func_call> ::= <var> (<arg>)*

# call func